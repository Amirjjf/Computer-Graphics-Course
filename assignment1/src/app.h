#pragma once

// Include libraries
#include "glad/gl_core_33.h"                // OpenGL
#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3.h>             // Window manager
#include <imgui.h>                  // GUI Library
#include <imgui_impl_glfw.h>
#include "imgui_impl_opengl3.h"

#include <Eigen/Dense>              // Linear algebra
#include <Eigen/Geometry>
#include <nlohmann/json.hpp>        // JSON library
#include <string>

using namespace std;        // enables writing "string" instead of std::string, etc.
using namespace Eigen;      // enables writing "Vector3f" instead of "Eigen::Vector3f", etc.

//------------------------------------------------------------------------

#include "image.h"
#include "Utils.h"
#include "vec_utils.h"

#include "app_base.h"
#include "ShaderProgram.h"
#include "Timer.h"
#include "simplify.h"

//------------------------------------------------------------------------

// State structure with JSON serialization support; see Instructions.
#define STATE_FIELDS(F)                                             \
    F(string, scene_mode, "triangle")                               \
    F(float, camera_rotation_angle, 0.0f)                           \
    F(bool, shading_toggle, false)                                  \
    F(bool, is_rotating, false)                                     \
    F(bool, trackball_toggle, false)                                \
    F(Vector3f, model_translation, Vector3f(0.0f, 0.0f, 0.0f))      \
    F(float, model_rotation_angle_y, 0.0f)                          \
    F(Vector3f, model_scale, Vector3f(1.0f, 1.0f, 1.0f))            \
    F(float, camera_distance, 2.1f)                                 \
    F(Vector3f, camera_target, Vector3f(0.0f, 0.0f, 0.0f))          \
    F(float, fovx_degrees, 120.0f)                                 \
    F(Matrix3f, trackball_current_rotation, Matrix3f::Identity())


// This includes the macro magic that turns the above STATE_FIELDS sequence into struct AppState { ... }
// that has the appropriate members and autogenerated JSON serialization code.
#include "app_state.h"

//------------------------------------------------------------------------

class App : public AppBase
{
public:
                        App();		// constructor
                        ~App();	    // destructor

    void                run(filesystem::path savePNGAndTerminate = "") override;

    AppState            m_state;

    // Structure for holding vertex data.
    struct Vertex
    {
        Vector3f position;
        Vector3f normal;

        static Vertex Zero() { return Vertex{ Vector3f::Zero(), Vector3f::Zero() }; }
    };

private:
                        App(const App&) = delete;		        // forbid copy
                        App& operator=(const App&) = delete;	// forbid assignment

    void                initRendering();
    void                render(const AppState& state, int window_width, int window_height, vector<string>& vecStatusMessages) const;

    void                showObjLoadDialog();
    void                showPlyLoadDialog();

    void                uploadGeometryToGPU(const vector<Vertex>& vertices) const;
    void                setMeshFromFlat(const vector<Vertex>& vertices) const;
    void                setMeshFromIndexed(const simplify::IndexedMesh& mesh) const;

    static vector<Vertex>   generateSingleTriangleMesh();
    static vector<Vertex>   generateIndexedTetrahedronMesh();
    static vector<Vertex>   generateConeMesh();
    static vector<Vertex>   loadObjFile(const filesystem::path&);
    static vector<Vertex>   loadPlyFile(const filesystem::path&);
    static vector<Vertex>   unpackIndexedData(const vector<Vector3f>& positions,
                                              const vector<Vector3f>& normals,
                                              const vector<array<unsigned, 6>>& faces);
    
    unique_ptr<ShaderProgram>   m_shader_program;
    map<string, GLuint>         m_vertex_input_mapping;  // Maps vertex shader input names to attribute indices (for glEnableVertexAttribArray, glVertexAttribPointer)
    mutable string              m_current_scene_mode;    // Which model are we showing? { triangle, indexed, generated_cone, obj(...) }
    mutable size_t              m_vertex_count = 0;      // VB size in number of vertices.
    mutable simplify::IndexedMesh       m_indexed_mesh;          // Current model in indexed form for simplification
    mutable size_t                      m_simplify_target = 0;   // UI target triangles

    struct glGeneratedIndices
    {
        GLuint static_vao = 0, dynamic_vao = 0;
        GLuint shader_program_id = 0;
        GLuint static_vertex_buffer = 0, dynamic_vertex_buffer = 0;
    };

    glGeneratedIndices  m_gl;

    Timer               m_timer;

    // Trackball state
    bool                m_trackball_dragging = false;
    Vector3f            m_arcball_last = Vector3f::Zero();


private:
    void				handleKeypress(GLFWwindow* window, int key, int scancode, int action, int mods) override;
    void				handleMouseButton(GLFWwindow* window, int button, int action, int mods) override;
    void				handleMouseMovement(GLFWwindow* window, double xpos, double ypos) override;
    void                handleScroll(GLFWwindow* window, double xoffset, double yoffset) override;
    void				handleDrop(GLFWwindow* window, int count, const char** paths) override;
};

//------------------------------------------------------------------------
